import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  FileText,
  Clock,
  User,
  Download,
  Calendar as CalendarIconLucide,
} from "lucide-react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar as ShadcnCalendar } from "@/components/ui/calendar";
import PropTypes from "prop-types";
import { Input } from "@/components/ui/input";

function formatDate(dateString) {
  return new Date(dateString).toLocaleDateString("id-ID", {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
}

function getDateRange(startDate, endDate) {
  const start = new Date(startDate).toLocaleDateString("id-ID", {
    day: "numeric",
    month: "short",
    year: "numeric",
  });
  const end = new Date(endDate).toLocaleDateString("id-ID", {
    day: "numeric",
    month: "short",
    year: "numeric",
  });
  return `${start} - ${end}`;
}

export default function ReportHistoryTable({
  reportHistory,
  handleDownload,
  search,
  setSearch,
  filterDate,
  setFilterDate,
  page,
  setPage,
  totalPage,
}) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Clock className="h-5 w-5" />
          Report History
        </CardTitle>
        <CardDescription>Download previously generated reports</CardDescription>
      </CardHeader>
      <CardContent>
        {/* Filter & Search */}
        <div className="flex w-full flex-wrap gap-2 mb-4 items-end">
          <div className="w-2/3">
            <label className="block text-xs mb-1">Cari</label>
            <Input
              type="text"
              className="border rounded-md px-2 py-1 text-sm"
              placeholder="Cari file atau user..."
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
          </div>
          <div>
            <label className="block text-xs mb-1">Filter Tanggal</label>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="h-9 px-3 text-sm">
                  <CalendarIconLucide className="mr-2 h-4 w-4" />
                  {filterDate?.from && filterDate?.to
                    ? `${filterDate.from.toLocaleDateString(
                        "id-ID"
                      )} - ${filterDate.to.toLocaleDateString("id-ID")}`
                    : "Pilih rentang tanggal"}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <ShadcnCalendar
                  key="filter-date-calendar"
                  initialFocus
                  mode="range"
                  selected={filterDate}
                  onSelect={setFilterDate}
                  numberOfMonths={2}
                  className="rounded-md border"
                />
              </PopoverContent>
            </Popover>
          </div>
        </div>
        {/* Table */}
        {reportHistory.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p>No reports generated yet</p>
          </div>
        ) : (
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>File Name</TableHead>
                  <TableHead>Period</TableHead>
                  <TableHead>Generated By</TableHead>
                  <TableHead>Created At</TableHead>
                  <TableHead className="text-right">Action</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {reportHistory.map((report) => (
                  <TableRow key={report.id}>
                    <TableCell className="font-medium">
                      <div className="flex items-center gap-2">
                        <FileText className="h-4 w-4 text-green-600" />
                        {report.fileName}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline" className="font-mono text-xs">
                        {getDateRange(report.startDate, report.endDate)}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 text-muted-foreground" />
                        {report.username}
                      </div>
                    </TableCell>
                    <TableCell className="text-muted-foreground">
                      {formatDate(report.createdAt)}
                    </TableCell>
                    <TableCell className="text-right">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDownload(report)}
                        className="flex items-center gap-2"
                      >
                        <Download className="h-4 w-4" />
                        Download
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
        {/* Pagination */}
        <div className="flex justify-between items-center mt-4">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setPage(page - 1)}
            disabled={page <= 1}
          >
            Prev
          </Button>
          <span className="text-sm">
            Halaman {page} dari {totalPage}
          </span>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setPage(page + 1)}
            disabled={page >= totalPage}
          >
            Next
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

ReportHistoryTable.propTypes = {
  reportHistory: PropTypes.arrayOf(PropTypes.object).isRequired,
  handleDownload: PropTypes.func.isRequired,
  search: PropTypes.string.isRequired,
  setSearch: PropTypes.func.isRequired,
  filterDate: PropTypes.shape({
    from: PropTypes.instanceOf(Date),
    to: PropTypes.instanceOf(Date),
  }),
  setFilterDate: PropTypes.func.isRequired,
  page: PropTypes.number.isRequired,
  setPage: PropTypes.func.isRequired,
  totalPage: PropTypes.number.isRequired,
};
